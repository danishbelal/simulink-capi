// Simulink CAPI - C++ header only library to interface with code generated by Simulink.
// Copyright (C) 2020-2021  Danish Belal
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License Version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

#ifndef _MODELTRAITS_HPP_
#define _MODELTRAITS_HPP_

#include <utility>

namespace db::simulink
{
////////////////////////////
// has_error_status
template <typename, typename = void>
struct has_error_status : std::false_type
{
};

template <typename T>
struct has_error_status<T, std::void_t<decltype(std::declval<T>().errorStatus)>> : std::true_type
{
};

template <typename T>
inline constexpr bool has_error_status_v = has_error_status<T>::value;

////////////////////////////
// has_datamapinfo
template <typename, typename = void>
struct has_datamapinfo : std::false_type
{
};

template <typename T>
struct has_datamapinfo<T, std::void_t<decltype(std::declval<T>().DataMapInfo)>> : std::true_type
{
};

template <typename T>
inline constexpr bool has_datamapinfo_v = has_datamapinfo<T>::value;

////////////////////////////
// has_childmmi
template <typename, typename = void>
struct has_childmmi : std::false_type
{
};

template <typename T>
struct has_childmmi<T, std::void_t<decltype(std::declval<T>().childMMI)>> : std::true_type
{
};

template <typename T>
inline constexpr bool has_childmmi_v = has_childmmi<T>::value;

////////////////////////////
// has_mmi
template <typename, typename = void>
struct has_mmi : std::false_type
{
};

template <typename T>
struct has_mmi<T, std::void_t<decltype(std::declval<T>().mmi)>> : std::true_type
{
};

template <typename T>
inline constexpr bool has_mmi_v = has_mmi<T>::value;

////////////////////////////
// has_block_io
template <typename, typename = void>
struct has_block_io : std::false_type
{
};

template <typename T>
struct has_block_io<T, std::void_t<decltype(std::declval<T>().blockIO)>> : std::true_type
{
};

template <typename T>
inline constexpr bool has_block_io_v = has_block_io<T>::value;

////////////////////////////
// has_instance_map
template <typename, typename = void>
struct has_instance_map : std::false_type
{
};

template <typename T>
struct has_instance_map<T, std::void_t<decltype(std::declval<T>().InstanceMap)>> : std::true_type
{
};

template <typename T>
inline constexpr bool has_instance_map_v = has_instance_map<T>::value;

}
#endif