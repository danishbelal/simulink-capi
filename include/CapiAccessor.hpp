// Simulink CAPI - C++ header only library to interface with code generated by Simulink.
// Copyright (C) 2020-2021  Danish Belal
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License Version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

#ifndef _PARAMETER_HPP_
#define _PARAMETER_HPP_

#include <exception>
#include <functional>
#include <iterator>
#include <optional>
#include <sstream>
#include <string>
#include <type_traits>

#include "AccessorHelper.hpp"
#include "CapiError.hpp"
#include "ModelTraits.hpp"

#ifdef ENABLE_RUNTIME_TYPE_CHECKING
#include "cleantype.hpp"
#endif

namespace db::simulink
{

constexpr auto ENABLE_EXCEPTIONS = true;
constexpr auto DISABLE_EXCEPTIONS = false;

constexpr auto ENABLE_TYPECHECKING = true;
constexpr auto DISABLE_TYPECHECKING = false;

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
class CapiAccessor;

template <typename ModelStruct, bool ExceptionsEnabled = ENABLE_EXCEPTIONS, bool TypeCheckingEnabled = ENABLE_TYPECHECKING>
using BlockParameters = CapiAccessor<rtwCAPI_BlockParameters, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>;
template <typename ModelStruct, bool ExceptionsEnabled = ENABLE_EXCEPTIONS, bool TypeCheckingEnabled = ENABLE_TYPECHECKING>
using ModelParameters = CapiAccessor<rtwCAPI_ModelParameters, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>;
template <typename ModelStruct, bool ExceptionsEnabled = ENABLE_EXCEPTIONS, bool TypeCheckingEnabled = ENABLE_TYPECHECKING>
using States = CapiAccessor<rtwCAPI_States, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>;
template <typename ModelStruct, bool ExceptionsEnabled = ENABLE_EXCEPTIONS, bool TypeCheckingEnabled = ENABLE_TYPECHECKING>
using Signals = CapiAccessor<rtwCAPI_Signals, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>;

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
class CapiAccessor
{
    static_assert(has_datamapinfo_v<ModelStruct>,
        "The Model Structure needs to have a DataMapInfo Member."
        "If it doesnt have one, its either not a Model Structure, "
        "or you didnt enable the C API.");

    ModelStruct& mMS;
    CapiError mError;

public:
    CapiAccessor(ModelStruct& MS);

    /// Returns a reference to the element.
    ///
    /// If you want to write the element, you \b must make sure to capture
    /// a reference to the value. Otherwise you might accidentally copy
    /// it - writes to a copy have no effect on the model!
    ///
    /// Writing to a BlockParameter of type double will looks like this:
    /// \code{.cpp}
    /// db::simulink::BlockParameters bp { ModelStruct };
    /// auto& Gain { bp.get<double>("Controller/Discrete-Time Integrator/gainval") };
    /// Gain = 23.35;
    /// \endcode
    ///
    /// It is also possible to not store the reference, but rather write
    /// directly to it. This is not recommended when repeatedly writing the
    /// element, due to increased lookup overhead.
    /// \code{.cpp}
    /// db::simulink::BlockParameters bp { ModelStruct };
    /// bp.get<double>("Controller/Discrete-Time Integrator/gainval") = 23.35;
    /// \endcode
    ///
    /// \throws std::runtime_error if a type mismatch is detected (only when
    /// type checking is enabled).
    /// \see ptr()
    /// \see opt()
    template <typename T>
    inline T& get(const std::string& Name);

    /// Returns a pointer to the element.
    ///
    /// Not very spectacular - it does what you expect.
    ///
    /// You can use it like this:
    /// \code{.cpp}
    /// db::simulink::BlockParameters bp { ModelStruct };
    /// auto GainPtr { bp.ptr<double>("Controller/Discrete-Time Integrator/gainval") };
    /// *GainPtr = 23.35;
    /// \endcode
    /// \throws std::runtime_error if a type mismatch is detected (only when
    /// type checking is enabled).
    /// \see get().
    /// \see opt()
    template <typename T>
    inline T* const ptr(const std::string& Name);

    /// Returns an `optional` that might contain a reference to the desired
    /// element.
    ///
    /// This does not throw an exception if the denoted element does not exist.
    /// In this case an empty `std::optional` will be returned. This must be
    /// explicitly checked by using `has_value()` (see example below).
    /// \code{.cpp}
    /// db::simulink::BlockParameters bp { ModelStruct };
    /// auto Opt { bp.opt<double>("Controller/Discrete-Time Integrator/gainval") };
    /// ASSERT(Opt.has_value());
    /// Opt->get() = 23.35;
    /// \endcode
    /// \see get()
    /// \see ptr()
    template <typename T>
    std::optional<std::reference_wrapper<T>> opt(const std::string& PathAndName);

    /// \internal
    template <typename T>
    T* FindInMMI(rtwCAPI_ModelMappingInfo& MMI, const std::string& PathAndName);
    /// \internal
    template <typename T>
    T* FindInStaticMMI(rtwCAPI_ModelMappingInfo& MMI, const std::string& PathAndName);

    void HandleError(CapiError Error);
    CapiError Error();

    // This Iterator can only be used in the current Model.
    // It does *NOT* search possibly referenced Submodels.
    class Iterator
    {
    public:
        using iterator_category = std::forward_iterator_tag;
        using difference_type = void;
        using value_type = const WrappedElement;
        using pointer = value_type*;
        using reference = value_type&;

        Iterator(const WrappedElement* const Elements)
            : mCurrentElement(Elements)
        {
        }

        reference operator*() const
        {
            return *mCurrentElement;
        }

        pointer operator->() const
        {
            return mCurrentElement;
        }

        Iterator& operator++()
        {
            mCurrentElement++;
            return *this;
        }

        Iterator operator++(int)
        {
            auto tmp { *this };
            ++(*this);
            return tmp;
        }

        friend bool operator==(const Iterator& a, const Iterator& b)
        {
            return a.mCurrentElement == b.mCurrentElement;
        }

        friend bool operator!=(const Iterator& a, const Iterator& b)
        {
            return a.mCurrentElement != b.mCurrentElement;
        }

    private:
        pointer mCurrentElement;
    };

    Iterator begin()
    {
        auto& MMI { mMS.DataMapInfo.mmi };
        auto RawData { GetRawData<WrappedElement>(MMI) };
        return Iterator(RawData);
    }

    Iterator end()
    {
        auto& MMI { mMS.DataMapInfo.mmi };
        auto RawData { GetRawData<WrappedElement>(MMI) + GetCount<WrappedElement>(MMI) };
        return Iterator(RawData);
    }

}; // end of class CapiAccessor.

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
CapiAccessor<WrappedElement, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>::CapiAccessor(ModelStruct& MS)
    : mMS(MS)
{
}

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
template <typename T>
T& CapiAccessor<WrappedElement, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>::get(const std::string& PathAndName)
{
    static_assert(ExceptionsEnabled, "CapiAccessor::get() is only available with Exceptions disabled.");
    return *ptr<T>(PathAndName);
}

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
template <typename T>
std::optional<std::reference_wrapper<T>> CapiAccessor<WrappedElement, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>::opt(const std::string& PathAndName)
{
    auto ptr { FindInMMI<T>(mMS.DataMapInfo.mmi, PathAndName) };
    std::optional<std::reference_wrapper<T>> Result;
    if (ptr)
    {
        Result = *ptr;
    }

    return Result;
}

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
template <typename T>
T* const CapiAccessor<WrappedElement, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>::ptr(const std::string& PathAndName)
{
    auto E { opt<T>(PathAndName) };
    if (!E.has_value())
    {
        std::ostringstream os;
        os << "Couldn't find Parameter '"
           << PathAndName << "'";
        CapiError Error { os.str(), ErrorType::NotFound };
        HandleError(Error);
        return nullptr;
    };
    return &E.value().get();
}

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
template <typename T>
T* CapiAccessor<WrappedElement, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>::FindInMMI(rtwCAPI_ModelMappingInfo& MMI, const std::string& PathAndName)
{
    auto Result { FindInStaticMMI<T>(MMI, PathAndName) };

    const std::size_t NumModels { MMI.InstanceMap.childMMIArrayLen };
    for (int i {}; Result == nullptr && i < NumModels; ++i)
    {
        Result = FindInMMI<T>(*MMI.InstanceMap.childMMIArray[i], PathAndName);
    }

    return Result;
}

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
template <typename T>
T* CapiAccessor<WrappedElement, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>::FindInStaticMMI(rtwCAPI_ModelMappingInfo& MMI, const std::string& PathAndName)
{
    T* Result { nullptr };

    const auto NumElements { db::simulink::GetCount<WrappedElement>(MMI) };
    const auto Data { db::simulink::GetRawData<WrappedElement>(MMI) };
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };

    // TODO: replace with std search algorithm
    for (std::size_t i {}; Result == nullptr && i < NumElements; ++i)
    {
        std::string CurrentParameter { db::simulink::GetName<WrappedElement>(MMI, i) };
        if (CurrentParameter == PathAndName)
        {
            if constexpr (TypeCheckingEnabled)
            {
                std::size_t DataTypeIndex { db::simulink::GetDataTypeIdx(Data, i) };
                auto DataTypeMap { db::simulink::GetRawData<rtwCAPI_DataTypeMap>(MMI) };
                std::string ActualType { db::simulink::GetTypeName<T>(DataTypeMap, DataTypeIndex) };
                std::string DeducedType { cleantype::clean<std::remove_reference_t<T>>() };

                if (ActualType != DeducedType)
                {
                    std::ostringstream os;
                    os << "Type mismatch "
                       << "(" << ActualType
                       << " vs. " << DeducedType;
                    CapiError Error { os.str(), ErrorType::TypeMismatch };
                    HandleError(Error);
                }
            }
            const std::size_t AddrIndex { db::simulink::GetAddrIdx(Data, i) };
            Result = db::simulink::GetDataAddress<T>(AddrMap, AddrIndex);
        }
    }
    return Result;
}

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
void CapiAccessor<WrappedElement, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>::HandleError(CapiError Error)
{
    if constexpr (ExceptionsEnabled)
    {
        mError = Error;
        throw std::runtime_error(Error.Message);
    }
    else
    {
        mError = Error;
    }
}

template <typename WrappedElement, typename ModelStruct, bool ExceptionsEnabled, bool TypeCheckingEnabled>
CapiError CapiAccessor<WrappedElement, ModelStruct, ExceptionsEnabled, TypeCheckingEnabled>::Error()
{
    return mError;
}

}
#endif