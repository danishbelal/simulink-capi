// Simulink CAPI - C++ header only library to interface with code generated by Simulink.
// Copyright (C) 2020-2021  Danish Belal
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License Version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#define ENABLE_RUNTIME_TYPE_CHECKING

#include "CapiAccessor.hpp"
#include "gtest/gtest.h"

#include <cstring>
#include <optional>

extern "C"
{
#include "Controller.h"
}

// In order to prevent side effects from one test file to another,
// the model and all of its data is redefined statically in each
// compilation unit.
//
// This does not eliminate all side effects, as there is statically
// allocated data in other files, which the model refers to.
//
// This should be outsourced (todo).
static RT_MODEL_Controller_T ModelStruct;
static BlockIO_Controller_T BlockSignals;
static D_Work_Controller_T ModelStates;
static InstP_Controller_T ModelInstanceParameter = { { { 2.3, 12.3 } } };

static ExternalInputs_Controller_T ModelInputs;
static ExternalOutputs_Controller_T ModelOutputs;

static void ResetModel()
{
    std::memset(&ModelStruct, 0x00, sizeof(ModelStruct));
    std::memset(&BlockSignals, 0x00, sizeof(BlockSignals));
    std::memset(&ModelStates, 0x00, sizeof(ModelStates));
    ModelInstanceParameter.InstP_Model.SubmodelConfig.Gain = 2.3;
    ModelInstanceParameter.InstP_Model.SubmodelConfig.SomeOtherMember = 12.3;

    ModelStruct.dwork = &ModelStates;
    ModelStruct.blockIO = &BlockSignals;
    ModelStruct.Controller_InstP_ref = &ModelInstanceParameter;

    Controller_initialize(&ModelStruct, &ModelInputs, &ModelOutputs);
}
static void DestroyModel()
{
    Controller_terminate(&ModelStruct);
}

// All the tests need to compare the result of the provided accessor to
// the "actual" value.  Retrieving the actual value requires searching the
// ModelMappingInfo for the corresponding data entry.
//
// This function outsources the task of searching for the Address Index.
template <typename CapiElement>
static std::size_t GetAddrMapIndex(const rtwCAPI_ModelMappingInfo& MMI, const std::string& PathAndName)
{
    std::optional<std::size_t> AddrMapIdx;
    auto CapiInstance { db::simulink::GetRawData<CapiElement>(MMI) };
    const std::size_t NumElements { db::simulink::GetCount<CapiElement>(MMI) };
    for (std::size_t i {}; i < NumElements; ++i)
    {
        std::string CurrentName { db::simulink::GetName<CapiElement>(CapiInstance, i) };
        if (CurrentName == PathAndName)
        {
            AddrMapIdx = db::simulink::GetAddrIdx(CapiInstance, i);
            break;
        }
    }
    if (!AddrMapIdx.has_value())
    {
        throw std::runtime_error("Could not find Parameter");
    }
    return *AddrMapIdx;
}

TEST(TestCapiAccessorInternal, GetAddrMapIndex)
{
    // Verify the GetAddrMapIndex function against some magic numbers.
    ResetModel();
    auto& MMI { ModelStruct.DataMapInfo.mmi };

    // Signals
    auto S1 { GetAddrMapIndex<rtwCAPI_Signals>(MMI, "Controller/Discrete-Time Integrator/") };
    auto S2 { GetAddrMapIndex<rtwCAPI_Signals>(MMI, "Controller/Model/") };
    auto S3 { GetAddrMapIndex<rtwCAPI_Signals>(MMI, "Controller/AlgebraicLoopBreaker/") };
    EXPECT_EQ(S1, 0);
    EXPECT_EQ(S2, 5);
    EXPECT_EQ(S3, 9);

    // Blockparameters
    auto BP1 { GetAddrMapIndex<rtwCAPI_BlockParameters>(MMI, "Controller/Constant/Value") };
    auto BP2 { GetAddrMapIndex<rtwCAPI_BlockParameters>(MMI, "Controller/Discrete-Time Integrator/gainval") };
    auto BP3 { GetAddrMapIndex<rtwCAPI_BlockParameters>(MMI, "Controller/AlgebraicLoopBreaker/InitialCondition") };
    EXPECT_EQ(BP1, 10);
    EXPECT_EQ(BP2, 11);
    EXPECT_EQ(BP3, 16);

    // Modelparameters
    auto MP1 { GetAddrMapIndex<rtwCAPI_ModelParameters>(MMI, "ModelConfig") };
    auto MP2 { GetAddrMapIndex<rtwCAPI_ModelParameters>(MMI, "mMatrix") };
    auto MP3 { GetAddrMapIndex<rtwCAPI_ModelParameters>(MMI, "X4_DD") };
    EXPECT_EQ(MP1, 19);
    EXPECT_EQ(MP2, 20);
    EXPECT_EQ(MP3, 22);

    // Blockstates
    auto BS1 { GetAddrMapIndex<rtwCAPI_States>(MMI, "Controller/Discrete-Time\nIntegrator/DSTATE") };
    auto BS2 { GetAddrMapIndex<rtwCAPI_States>(MMI, "Controller/AlgebraicLoopBreaker/DSTATE") };
    EXPECT_EQ(BS1, 17);
    EXPECT_EQ(BS2, 18);
}

TEST(CapiAccessor, BlockParameterGet)
{
    using WrappedElement = rtwCAPI_BlockParameters;
    ResetModel();

    constexpr double SetValue { 123.456 };
    constexpr auto ElemPath { "Controller/Discrete-Time Integrator/gainval" };

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::BlockParameters bp { MMI };
    auto& Gain { bp.get<double>(ElemPath) };
    Gain = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };
    // Search for the AddressMap Index.
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(MMI, ElemPath) };
    double* Gain2 { static_cast<double*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue, *Gain2) << "Parameter could not be set";
}

TEST(CapiAccessor, BlockParameterDirect)
{
    using WrappedElement = rtwCAPI_BlockParameters;
    ResetModel();

    constexpr double SetValue { 123.456 };
    constexpr auto ElemPath { "Controller/Discrete-Time Integrator/gainval" };

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::BlockParameters bp { MMI };
    bp.get<double>(ElemPath) = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(MMI, ElemPath) };
    double* Gain2 { static_cast<double*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue, *Gain2) << "Parameter could not be set";
}

TEST(CapiAccessor, BlockParameterOptional)
{
    using WrappedElement = rtwCAPI_BlockParameters;
    ResetModel();

    constexpr double SetValue { 123.456 };
    constexpr auto ElemPath { "Controller/Discrete-Time Integrator/gainval" };

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::BlockParameters bp { MMI };
    auto Opt { bp.opt<double>(ElemPath) };
    ASSERT_TRUE(Opt.has_value()) << "Element not found";
    Opt->get() = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(MMI, ElemPath) };
    double* Gain2 { static_cast<double*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue, *Gain2) << "Parameter could not be set";
}

TEST(CapiAccessor, InvalidBlockParameterGet)
{
    ResetModel();

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::BlockParameters bp { MMI };
    EXPECT_THROW(auto& ref { bp.get<double>("does/not/exist") }, std::runtime_error);
}

TEST(CapiAccessor, InvalidBlockParameterPtr)
{
    ResetModel();

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::BlockParameters bp { MMI };
    EXPECT_THROW(auto ptr { bp.ptr<double>("does/not/exist") }, std::runtime_error);
}

TEST(CapiAccessor, InvalidBlockParameterOpt)
{
    ResetModel();

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::BlockParameters bp { MMI };
    auto Opt { bp.opt<double>("does/not/exist") };
    EXPECT_FALSE(Opt.has_value());
    EXPECT_FALSE(Opt);
}

TEST(CapiAccessor, ModelParameterGet)
{
    using WrappedElement = rtwCAPI_ModelParameters;
    ResetModel();

    constexpr ConfigBus SetValue { 23.6, 12.3 };
    constexpr auto ElemName { "ModelConfig" };

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::ModelParameters bp { MMI };
    auto& Config { bp.get<ConfigBus>(ElemName) };
    Config = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(MMI, ElemName) };
    auto* Actual { static_cast<ConfigBus*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue.Gain, Actual->Gain) << "Parameter could not be set";
    EXPECT_DOUBLE_EQ(SetValue.SomeOtherMember, Actual->SomeOtherMember) << "Parameter could not be set";
}

TEST(CapiAccessor, ModelParameterDirect)
{
    using WrappedElement = rtwCAPI_ModelParameters;
    ResetModel();

    constexpr ConfigBus SetValue { 23.6, 12.3 };
    constexpr auto ElemName { "ModelConfig" };

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::ModelParameters bp { MMI };
    bp.get<ConfigBus>(ElemName) = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(MMI, ElemName) };
    auto* Actual { static_cast<ConfigBus*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue.Gain, Actual->Gain) << "Parameter could not be set";
    EXPECT_DOUBLE_EQ(SetValue.SomeOtherMember, Actual->SomeOtherMember) << "Parameter could not be set";
}

TEST(CapiAccessor, ModelParameterOptional)
{
    using WrappedElement = rtwCAPI_ModelParameters;
    ResetModel();

    constexpr ConfigBus SetValue { 23.6, 12.3 };
    constexpr auto ElemName { "ModelConfig" };

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::ModelParameters bp { MMI };
    auto Opt { bp.opt<ConfigBus>(ElemName) };
    ASSERT_TRUE(Opt.has_value()) << "Element not found";
    Opt->get() = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(MMI, ElemName) };
    auto* Actual { static_cast<ConfigBus*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue.Gain, Actual->Gain) << "Parameter could not be set";
    EXPECT_DOUBLE_EQ(SetValue.SomeOtherMember, Actual->SomeOtherMember) << "Parameter could not be set";
}

TEST(CapiAccessor, InvalidModelParameterGet)
{
    ResetModel();

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::ModelParameters mp { MMI };
    EXPECT_THROW(auto& ref { mp.get<double>("does-not-exist") }, std::runtime_error);
}

TEST(CapiAccessor, InvalidModelParameterPtr)
{
    ResetModel();

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::ModelParameters mp { MMI };
    EXPECT_THROW(auto ptr { mp.ptr<double>("does-not-exist") }, std::runtime_error);
}

TEST(CapiAccessor, InvalidModelParameterOpt)
{
    ResetModel();

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::ModelParameters mp { MMI };
    auto Opt { mp.opt<double>("does-not-exist") };
    EXPECT_FALSE(Opt.has_value());
    EXPECT_FALSE(Opt);
}

TEST(CapiAccessor, SignalGet)
{
    using WrappedElement = rtwCAPI_Signals;
    ResetModel();

    constexpr double SetValue { 5.4 };
    constexpr auto ElemPathAndName { "Controller/Sum/" };

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::Signals sigs { MMI };
    auto& Sum { sigs.get<double>(ElemPathAndName) };
    Sum = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(MMI, ElemPathAndName) };
    auto* Actual { static_cast<double*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue, *Actual) << "Parameter could not be set";
}

TEST(CapiAccessor, SignalDirect)
{
    using WrappedElement = rtwCAPI_Signals;
    ResetModel();

    constexpr double SetValue { 5.4 };
    constexpr auto ElemPathAndName { "Controller/Sum/" };

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::Signals sigs { MMI };
    sigs.get<double>(ElemPathAndName) = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(MMI, ElemPathAndName) };
    auto* Actual { static_cast<double*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue, *Actual) << "Parameter could not be set";
}

TEST(CapiAccessor, SignalOpt)
{
    using WrappedElement = rtwCAPI_Signals;
    ResetModel();

    constexpr double SetValue { 5.4 };
    constexpr auto ElemPathAndName { "Controller/Sum/" };

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::Signals sigs { MMI };
    auto Sum { sigs.opt<double>(ElemPathAndName) };
    ASSERT_TRUE(Sum.has_value());
    Sum->get() = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI) };
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(MMI, ElemPathAndName) };
    auto* Actual { static_cast<double*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue, *Actual) << "Parameter could not be set";
}

TEST(CapiAccessor, InvalidSignalGet)
{
    ResetModel();

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::Signals sigs { MMI };
    EXPECT_THROW(auto& ref { sigs.get<double>("does-not-exist") }, std::runtime_error);
}

TEST(CapiAccessor, InvalidSignalDirect)
{
    ResetModel();

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::Signals sigs { MMI };
    EXPECT_THROW(auto ptr { sigs.ptr<double>("does-not-exist") }, std::runtime_error);
}

TEST(CapiAccessor, InvalidSignalOpt)
{
    ResetModel();

    auto& MMI { ModelStruct.DataMapInfo.mmi };
    db::simulink::Signals sigs { MMI };
    auto Opt { sigs.opt<double>("does-not-exist") };
    EXPECT_FALSE(Opt.has_value());
    EXPECT_FALSE(Opt);
}