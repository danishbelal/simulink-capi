// Simulink CAPI - C++ header only library to interface with code generated by Simulink.
// Copyright (C) 2020-2021  Danish Belal
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License Version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

/// \file

#define ENABLE_RUNTIME_TYPE_CHECKING

#include "CapiAccessor.hpp"
#include "TestCapiAccessorBase.hpp"
#include "gtest/gtest.h"

#include <cstring>
#include <optional>

extern "C"
{
#include "Controller.h"
}

class TestCapiAccessorRef : public TestCapiAccessorBase
{
protected:
    rtwCAPI_ModelMappingInfo& MMI() override
    {
        assert(ModelStruct.DataMapInfo.mmi.InstanceMap.childMMIArrayLen > 0);
        return *ModelStruct.DataMapInfo.mmi.InstanceMap.childMMIArray[0];
    }
};

using BlockParameters = db::simulink::BlockParameters<RT_MODEL_Controller_T>;
using ModelParameters = db::simulink::ModelParameters<RT_MODEL_Controller_T>;
using States = db::simulink::States<RT_MODEL_Controller_T>;
using Signals = db::simulink::Signals<RT_MODEL_Controller_T>;

TEST_F(TestCapiAccessorRef, BlockParameterGet)
{
    using WrappedElement = rtwCAPI_BlockParameters;

    constexpr double SetValue { 123.456 };
    constexpr auto ElemPath { "Controller/ModelRef1/ControllerRef/NormalGain/Gain" };

    BlockParameters bp { ModelStruct };
    auto& Gain { bp.get<double>(ElemPath) };
    Gain = SetValue;

    // Check if the parameter was actually written
    void* const* const AddrMap { rtwCAPI_GetDataAddressMap(&MMI()) };
    // Search for the AddressMap Index.
    auto AddrMapIdx { GetAddrMapIndex<WrappedElement>(ElemPath) };
    double* Gain2 { static_cast<double*>(rtwCAPI_GetDataAddress(AddrMap, AddrMapIdx)) };

    EXPECT_DOUBLE_EQ(SetValue, *Gain2) << "Parameter could not be set";
}